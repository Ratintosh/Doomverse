const fs = require( 'fs' )
const {ipcMain, app, BrowserWindow} = require('electron')
const path = require('path')
const url = require('url')
const { dialog } = require('electron')
const os = require('os')
const config = "config.json"

exports.getConfig = function () {
    let rawdata = fs.readFileSync(config); //config file location! change when done developing
    let data = JSON.parse(rawdata);
    return data;
}

exports.writeConfig = async function (usrCfg) {
    fs.writeFile(config, JSON.stringify(usrCfg), (err) => {
        if (err) {
          console.error(err);
          return;
        }
        console.log('Data written to file successfully!');
        return true;
      });
}


exports.initConfig = function (cfg) {
    window = new BrowserWindow({
        width: 500,
        height: 768,
        show: false, //prevents flickering
        webPreferences: {
            nodeIntegration: true,
            contextIsolation: false,
            enableRemoteModule: true
        },
        frame: false, // this is a requirement for transparent windows it seems
        show: true,
        blur: true,
        blurType: "blurbehind",
        blurGnomeSigma: 100,
        blurCornerRadius: 20,
        vibrancy: "fullscreen-ui",
            frame: false,
            transparent: true
        })
    window.loadURL(url.format({
        pathname: path.join(__dirname, 'static/configure.html'),
        protocol: 'file:',
        slashes: true
    }))

    window.once('ready-to-show', () => {
        window.show()
    })
    
    window.on('closed', function () {
        mainWindow = null
    })
    ipcMain.on('requestConfig', function () {
        console.log(cfg)
        //probably check to make sure the config is valid?
        //check every path to make sure they exist, if they dont, set it to null.
        window.webContents.send('config', cfg);
    })
}


exports.validateConfig = function () {
    //make sure everything is nominal in the config file...

    //going to set it to false for testing though
    return false;
}

//config-related IPC
ipcMain.on('chooseFile', function (event, elementData) {
    dialog.showOpenDialog({
        properties: ['openFile']
    }).then((data) => {
        this.section = elementData["section"]
        this.value = elementData["value"]
        cfg = exports.getConfig()
        cfg[this.section][this.value] = data.filePaths
        console.log(cfg)
        exports.writeConfig(cfg).then((data) => {
            event.sender.send('updateConfigWizard', cfg);
        })
        
    });
})

// ipcMain.handle('chooseFile', async (event, arg) => {
//     dialog.showOpenDialog({
//         properties: ['openFile']
//     }).then((data) => {
//         event.sender.send('selected-file', [data.filePaths, elementData]);
//         //return data.filePaths;
//     });
// })

ipcMain.on('submitConfigChanges', function (event, data) {
    console.log(data);
    //write to config here
})